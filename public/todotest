<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Student To-Do List App</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        }
        
        body {
            background: linear-gradient(135deg, #6a11cb 0%, #2575fc 100%);
            min-height: 100vh;
            display: flex;
            flex-direction: column;
            align-items: center;
            padding: 20px;
            color: #333;
        }
        
        .instructions {
            background: white;
            border-radius: 15px;
            padding: 25px;
            margin-bottom: 30px;
            width: 100%;
            max-width: 800px;
            box-shadow: 0 10px 25px rgba(0, 0, 0, 0.2);
        }
        
        .instructions h1 {
            color: #4a6ee0;
            text-align: center;
            margin-bottom: 20px;
            font-size: 32px;
        }
        
        .instructions-content {
            display: flex;
            flex-wrap: wrap;
            gap: 20px;
        }
        
        .instruction-card {
            flex: 1;
            min-width: 250px;
            background: #f9fafc;
            border-radius: 12px;
            padding: 20px;
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);
        }
        
        .instruction-card h3 {
            color: #4a6ee0;
            margin-bottom: 15px;
            display: flex;
            align-items: center;
            gap: 10px;
        }
        
        .instruction-card i {
            font-size: 24px;
        }
        
        .instruction-card ul {
            list-style-type: none;
        }
        
        .instruction-card li {
            margin-bottom: 10px;
            padding-left: 10px;
            border-left: 3px solid #4a6ee0;
            padding: 8px 0 8px 15px;
        }
        
        .container {
            width: 100%;
            max-width: 500px;
            background: white;
            border-radius: 20px;
            box-shadow: 0 15px 35px rgba(0, 0, 0, 0.2);
            overflow: hidden;
        }
        
        .header {
            background: #4a6ee0;
            color: white;
            padding: 25px 30px;
            text-align: center;
            position: relative;
        }
        
        .header h2 {
            font-weight: 600;
            font-size: 28px;
            margin-bottom: 5px;
        }
        
        .header p {
            opacity: 0.9;
        }
        
        .storage-toggle {
            position: absolute;
            top: 15px;
            right: 15px;
            display: flex;
            background: rgba(255, 255, 255, 0.2);
            border-radius: 20px;
            padding: 4px;
        }
        
        .storage-toggle-btn {
            padding: 6px 12px;
            border: none;
            border-radius: 20px;
            background: transparent;
            color: white;
            font-size: 12px;
            cursor: pointer;
            transition: all 0.3s;
        }
        
        .storage-toggle-btn.active {
            background: white;
            color: #4a6ee0;
        }
        
        .sync-status {
            display: flex;
            align-items: center;
            justify-content: center;
            gap: 8px;
            margin-top: 10px;
            font-size: 14px;
        }
        
        .sync-status i {
            font-size: 12px;
        }
        
        .status-online {
            color: #aaffaa;
        }
        
        .status-offline {
            color: #ffaaaa;
        }
        
        .app-content {
            padding: 25px;
        }
        
        .input-section {
            display: flex;
            margin-bottom: 25px;
            position: relative;
        }
        
        #task-input {
            flex: 1;
            padding: 15px 20px;
            border: 2px solid #ddd;
            border-radius: 12px;
            font-size: 16px;
            transition: border-color 0.3s;
        }
        
        #task-input:focus {
            border-color: #4a6ee0;
            outline: none;
        }
        
        #add-btn {
            margin-left: 12px;
            width: 55px;
            background: #4a6ee0;
            color: white;
            border: none;
            border-radius: 12px;
            cursor: pointer;
            font-size: 24px;
            transition: background 0.3s;
            display: flex;
            justify-content: center;
            align-items: center;
        }
        
        #add-btn:hover {
            background: #3a5ec0;
        }
        
        .tasks-container {
            background: #f9fafc;
            border-radius: 12px;
            overflow: hidden;
            margin-bottom: 20px;
            max-height: 400px;
            overflow-y: auto;
        }
        
        .task-item {
            display: flex;
            align-items: center;
            padding: 18px 20px;
            border-bottom: 1px solid #eee;
            transition: background 0.3s;
            animation: fadeIn 0.5s;
        }
        
        .task-item:hover {
            background: #f1f5ff;
        }
        
        .task-item:last-child {
            border-bottom: none;
        }
        
        .task-checkbox {
            margin-right: 15px;
            width: 22px;
            height: 22px;
            cursor: pointer;
        }
        
        .task-text {
            flex: 1;
            font-size: 16px;
            color: #333;
            word-break: break-word;
            transition: color 0.3s;
        }
        
        .completed .task-text {
            text-decoration: line-through;
            color: #888;
        }
        
        .task-actions {
            display: flex;
            gap: 12px;
        }
        
        .task-actions button {
            background: none;
            border: none;
            cursor: pointer;
            font-size: 18px;
            color: #7a7a7a;
            transition: color 0.3s;
            width: 35px;
            height: 35px;
            border-radius: 50%;
            display: flex;
            justify-content: center;
            align-items: center;
        }
        
        .edit-btn:hover {
            color: #4a6ee0;
            background: #e6eeff;
        }
        
        .delete-btn:hover {
            color: #ff5252;
            background: #ffebee;
        }
        
        .empty-state {
            text-align: center;
            padding: 40px 20px;
            color: #888;
        }
        
        .empty-state i {
            font-size: 50px;
            margin-bottom: 15px;
            color: #ccc;
        }
        
        .empty-state p {
            font-size: 18px;
        }
        
        .stats {
            display: flex;
            justify-content: space-between;
            background: #e6eeff;
            padding: 15px 20px;
            border-radius: 12px;
            font-size: 15px;
            color: #4a6ee0;
            font-weight: 500;
        }
        
        .filters {
            display: flex;
            gap: 10px;
            margin-bottom: 20px;
        }
        
        .filter-btn {
            flex: 1;
            padding: 10px;
            background: #f1f5ff;
            border: none;
            border-radius: 8px;
            color: #4a6ee0;
            font-weight: 500;
            cursor: pointer;
            transition: all 0.3s;
        }
        
        .filter-btn.active {
            background: #4a6ee0;
            color: white;
        }
        
        .notification {
            position: fixed;
            top: 20px;
            right: 20px;
            padding: 15px 20px;
            border-radius: 8px;
            background: #4a6ee0;
            color: white;
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.2);
            transform: translateX(100%);
            opacity: 0;
            transition: all 0.3s;
            z-index: 1000;
        }
        
        .notification.show {
            transform: translateX(0);
            opacity: 1;
        }
        
        @keyframes fadeIn {
            from { opacity: 0; transform: translateY(10px); }
            to { opacity: 1; transform: translateY(0); }
        }
        
        @media (max-width: 600px) {
            .instructions-content {
                flex-direction: column;
            }
            
            .container {
                border-radius: 15px;
            }
            
            .header {
                padding: 20px;
            }
            
            .app-content {
                padding: 20px;
            }
            
            .task-item {
                padding: 15px;
            }
        }
    </style>
</head>
<body>
    <div class="notification" id="notification">
        <span id="notification-text"></span>
    </div>

    <div class="instructions">
        <h1>Student To-Do List with Cloud Sync</h1>
        <div class="instructions-content">
            <div class="instruction-card">
                <h3><i class="fas fa-cloud"></i> Cloud Storage</h3>
                <ul>
                    <li>Toggle between local and cloud storage</li>
                    <li>Cloud storage simulates API calls to a server</li>
                    <li>Your data persists across devices with cloud storage</li>
                    <li>Green sync indicator shows cloud connection status</li>
                </ul>
            </div>
            
            <div class="instruction-card">
                <h3><i class="fas fa-plus-circle"></i> Add Tasks</h3>
                <ul>
                    <li>Type your task in the input box at the top</li>
                    <li>Press Enter or click the + button to add it</li>
                    <li>Tasks automatically sync to your selected storage</li>
                </ul>
            </div>
            
            <div class="instruction-card">
                <h3><i class="fas fa-check-square"></i> Manage Tasks</h3>
                <ul>
                    <li>Click the checkbox to mark tasks as complete</li>
                    <li>Use the edit button to modify tasks</li>
                    <li>Use the delete button to remove tasks</li>
                    <li>Filter tasks using the buttons above the list</li>
                </ul>
            </div>
        </div>
    </div>

    <div class="container">
        <div class="header">
            <div class="storage-toggle">
                <button class="storage-toggle-btn active" data-storage="local">Local</button>
                <button class="storage-toggle-btn" data-storage="cloud">Cloud</button>
            </div>
            
            <h2><i class="fas fa-tasks"></i> Student To-Do List</h2>
            <p>Organize your tasks and boost your productivity</p>
            
            <div class="sync-status">
                <i class="fas fa-circle status-offline" id="status-icon"></i>
                <span id="status-text">Using Local Storage</span>
            </div>
        </div>
        
        <div class="app-content">
            <div class="input-section">
                <input type="text" id="task-input" placeholder="Enter a new task...">
                <button id="add-btn"><i class="fas fa-plus"></i></button>
            </div>
            
            <div class="filters">
                <button class="filter-btn active" data-filter="all">All</button>
                <button class="filter-btn" data-filter="active">Active</button>
                <button class="filter-btn" data-filter="completed">Completed</button>
            </div>
            
            <div class="tasks-container">
                <div class="empty-state" id="empty-state">
                    <i class="fas fa-check-circle"></i>
                    <p>No tasks yet. Add a task to get started!</p>
                </div>
                <!-- Tasks will be added here dynamically -->
            </div>
            
            <div class="stats">
                <div>Total: <span id="total-tasks">0</span></div>
                <div>Completed: <span id="completed-tasks">0</span></div>
                <div>Active: <span id="active-tasks">0</span></div>
            </div>
        </div>
    </div>

    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // DOM Elements
            const taskInput = document.getElementById('task-input');
            const addBtn = document.getElementById('add-btn');
            const tasksContainer = document.querySelector('.tasks-container');
            const emptyState = document.getElementById('empty-state');
            const totalTasksSpan = document.getElementById('total-tasks');
            const completedTasksSpan = document.getElementById('completed-tasks');
            const activeTasksSpan = document.getElementById('active-tasks');
            const filterBtns = document.querySelectorAll('.filter-btn');
            const storageToggleBtns = document.querySelectorAll('.storage-toggle-btn');
            const statusIcon = document.getElementById('status-icon');
            const statusText = document.getElementById('status-text');
            const notification = document.getElementById('notification');
            const notificationText = document.getElementById('notification-text');
            
            // State
            let tasks = [];
            let currentFilter = 'all';
            let currentStorage = 'local'; // 'local' or 'cloud'
            
            // Show notification
            function showNotification(message) {
                notificationText.textContent = message;
                notification.classList.add('show');
                
                setTimeout(() => {
                    notification.classList.remove('show');
                }, 3000);
            }
            
            // Cloud storage simulation (using localStorage as a mock API)
            const cloudStorage = {
                // Simulate network delay
                delay: (ms) => new Promise(resolve => setTimeout(resolve, ms)),
                
                // Simulate API call to get tasks
                async getTasks() {
                    await this.delay(500); // Simulate network delay
                    const cloudTasks = JSON.parse(localStorage.getItem('cloudTasks')) || [];
                    return cloudTasks;
                },
                
                // Simulate API call to save tasks
                async saveTasks(tasks) {
                    await this.delay(500); // Simulate network delay
                    localStorage.setItem('cloudTasks', JSON.stringify(tasks));
                    return true;
                },
                
                // Check if cloud is available (simulated)
                async isAvailable() {
                    await this.delay(100);
                    // Simulate occasional connection issues (10% chance of failure)
                    return Math.random() > 0.1;
                }
            };
            
            // Initialize the app
            async function init() {
                // Set up event listeners
                addBtn.addEventListener('click', addTask);
                taskInput.addEventListener('keypress', function(e) {
                    if (e.key === 'Enter') {
                        addTask();
                    }
                });
                
                // Filter event listeners
                filterBtns.forEach(btn => {
                    btn.addEventListener('click', function() {
                        filterBtns.forEach(b => b.classList.remove('active'));
                        this.classList.add('active');
                        currentFilter = this.dataset.filter;
                        renderTasks();
                    });
                });
                
                // Storage toggle event listeners
                storageToggleBtns.forEach(btn => {
                    btn.addEventListener('click', function() {
                        storageToggleBtns.forEach(b => b.classList.remove('active'));
                        this.classList.add('active');
                        const newStorage = this.dataset.storage;
                        
                        // Show notification if switching to cloud and it's not available
                        if (newStorage === 'cloud') {
                            cloudStorage.isAvailable().then(available => {
                                if (!available) {
                                    showNotification("Cloud storage is temporarily unavailable. Using local storage.");
                                    return;
                                }
                                
                                currentStorage = newStorage;
                                updateStorageStatus();
                                loadTasks();
                                showNotification("Switched to Cloud Storage");
                            });
                        } else {
                            currentStorage = newStorage;
                            updateStorageStatus();
                            loadTasks();
                            showNotification("Switched to Local Storage");
                        }
                    });
                });
                
                // Event delegation for task actions
                tasksContainer.addEventListener('click', function(e) {
                    const taskItem = e.target.closest('.task-item');
                    if (!taskItem) return;
                    
                    const index = parseInt(taskItem.dataset.index);
                    
                    // Checkbox toggle
                    if (e.target.classList.contains('task-checkbox')) {
                        toggleTaskCompleted(index);
                    }
                    
                    // Delete button
                    if (e.target.classList.contains('delete-btn')) {
                        deleteTask(index);
                    }
                    
                    // Edit button
                    if (e.target.classList.contains('edit-btn')) {
                        editTask(index);
                    }
                });
                
                // Load initial tasks
                await loadTasks();
                updateStorageStatus();
            }
            
            // Update storage status indicator
            function updateStorageStatus() {
                if (currentStorage === 'cloud') {
                    statusIcon.className = 'fas fa-circle status-online';
                    statusText.textContent = 'Using Cloud Storage';
                } else {
                    statusIcon.className = 'fas fa-circle status-offline';
                    statusText.textContent = 'Using Local Storage';
                }
            }
            
            // Load tasks from appropriate storage
            async function loadTasks() {
                try {
                    if (currentStorage === 'cloud') {
                        const cloudAvailable = await cloudStorage.isAvailable();
                        if (!cloudAvailable) {
                            showNotification("Cloud storage unavailable. Using local storage.");
                            currentStorage = 'local';
                            // Update toggle buttons to reflect the change
                            document.querySelector('[data-storage="local"]').classList.add('active');
                            document.querySelector('[data-storage="cloud"]').classList.remove('active');
                            updateStorageStatus();
                        } else {
                            tasks = await cloudStorage.getTasks();
                        }
                    }
                    
                    if (currentStorage === 'local') {
                        tasks = JSON.parse(localStorage.getItem('tasks')) || [];
                    }
                } catch (error) {
                    console.error('Failed to load tasks:', error);
                    tasks = [];
                    showNotification("Error loading tasks");
                }
                
                renderTasks();
                updateStats();
            }
            
            // Save tasks to appropriate storage
            async function saveTasks() {
                try {
                    if (currentStorage === 'cloud') {
                        const cloudAvailable = await cloudStorage.isAvailable();
                        if (!cloudAvailable) {
                            throw new Error('Cloud storage unavailable');
                        }
                        await cloudStorage.saveTasks(tasks);
                    } else {
                        localStorage.setItem('tasks', JSON.stringify(tasks));
                    }
                    showNotification("Tasks saved successfully");
                } catch (error) {
                    console.error('Failed to save tasks:', error);
                    // Fallback to local storage
                    localStorage.setItem('tasks', JSON.stringify(tasks));
                    showNotification("Saved to local storage (cloud unavailable)");
                }
            }
            
            // Add a new task
            async function addTask() {
                const taskText = taskInput.value.trim();
                
                if (taskText !== '') {
                    tasks.push({
                        text: taskText,
                        completed: false,
                        id: Date.now()
                    });
                    
                    await saveTasks();
                    renderTasks();
                    updateStats();
                    
                    // Clear input
                    taskInput.value = '';
                    taskInput.focus();
                    
                    showNotification("Task added successfully");
                }
            }
            
            // Toggle task completion
            async function toggleTaskCompleted(index) {
                tasks[index].completed = !tasks[index].completed;
                await saveTasks();
                renderTasks();
                updateStats();
                
                const status = tasks[index].completed ? "completed" : "marked as active";
                showNotification(`Task ${status}`);
            }
            
            // Delete a task
            async function deleteTask(index) {
                if (confirm("Are you sure you want to delete this task?")) {
                    tasks.splice(index, 1);
                    await saveTasks();
                    renderTasks();
                    updateStats();
                    showNotification("Task deleted");
                }
            }
            
            // Edit a task
            async function editTask(index) {
                const newText = prompt('Edit your task:', tasks[index].text);
                
                if (newText !== null && newText.trim() !== '') {
                    tasks[index].text = newText.trim();
                    await saveTasks();
                    renderTasks();
                    showNotification("Task updated");
                }
            }
            
            // Render tasks based on current filter
            function renderTasks() {
                // Clear the container
                tasksContainer.innerHTML = '';
                
                // Filter tasks
                let filteredTasks = tasks;
                if (currentFilter === 'active') {
                    filteredTasks = tasks.filter(task => !task.completed);
                } else if (currentFilter === 'completed') {
                    filteredTasks = tasks.filter(task => task.completed);
                }
                
                // Show empty state if no tasks
                if (filteredTasks.length === 0) {
                    tasksContainer.appendChild(emptyState);
                    emptyState.style.display = 'block';
                    return;
                }
                
                emptyState.style.display = 'none';
                
                // Render tasks
                filteredTasks.forEach((task, index) => {
                    const taskElement = document.createElement('div');
                    taskElement.className = `task-item ${task.completed ? 'completed' : ''}`;
                    taskElement.dataset.index = tasks.indexOf(task); // Store original index
                    
                    taskElement.innerHTML = `
                        <input type="checkbox" class="task-checkbox" ${task.completed ? 'checked' : ''}>
                        <span class="task-text">${task.text}</span>
                        <div class="task-actions">
                            <button class="edit-btn"><i class="fas fa-edit"></i></button>
                            <button class="delete-btn"><i class="fas fa-trash-alt"></i></button>
                        </div>
                    `;
                    
                    tasksContainer.appendChild(taskElement);
                });
            }
            
            // Update statistics
            function updateStats() {
                const totalTasks = tasks.length;
                const completedTasks = tasks.filter(task => task.completed).length;
                const activeTasks = totalTasks - completedTasks;
                
                totalTasksSpan.textContent = totalTasks;
                completedTasksSpan.textContent = completedTasks;
                activeTasksSpan.textContent = activeTasks;
            }
            
            // Initialize the app
            init();
        });
    </script>
</body>
</html>